{
  "contractName": "CertificateController",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "checkCount",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "certificateSigners",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_certificateSigner",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Checked",
      "type": "event"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.0+commit.1d4f565a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"checkCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"certificateSigners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_certificateSigner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Checked\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"certificateSigners(address)\":{\"details\":\"Get certificate signer authorization for an operator.\",\"params\":{\"operator\":\"Address whom to check the certificate signer authorization for.\"},\"return\":\"bool 'true' if operator is authorized as certificate signer, 'false' if not.\"},\"checkCount(address)\":{\"details\":\"Get number of transations already sent to this contract by the sender\",\"params\":{\"sender\":\"Address whom to check the counter of.\"},\"return\":\"uint256 Number of transaction already sent to this contract.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/home/moez/Desktop/ProjetPFE/Dapps/ERC1400F/contracts/CertificateController/CertificateController.sol\":\"CertificateController\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/moez/Desktop/ProjetPFE/Dapps/ERC1400F/contracts/CertificateController/CertificateController.sol\":{\"keccak256\":\"0x76459154e95c8b0f4fa7a7362063253e0abe75467024a45816164368477d0374\",\"urls\":[\"bzzr://037debc3b2513db3d856700e17e66e8cf8f14bd1093e6b70ba6490ad7cc2a46b\"]},\"/home/moez/Desktop/ProjetPFE/Dapps/ERC1400F/contracts/mocks/CertificateControllerMock.sol\":{\"keccak256\":\"0x0f2039706f8dd7b25dfc24a584e876259178b8b68721056b6d54f29f08dca969\",\"urls\":[\"bzzr://be4b4cbfc7f1743b5a14b99ab9646f0a5537c3fa9fadb9e79f6b74b20a51e03b\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516020806102998339810180604052602081101561003057600080fd5b50518061004781600164010000000061004e810204565b5050610115565b600160a060020a03821615156100ea57604080517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f416374696f6e20426c6f636b6564202d204e6f7420612076616c69642061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a03919091166000908152602081905260409020805460ff1916911515919091179055565b610175806101246000396000f3fe60806040526004361061004b5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166369102190811461005057806371de6362146100a2575b600080fd5b34801561005c57600080fd5b506100906004803603602081101561007357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166100f6565b60408051918252519081900360200190f35b3480156100ae57600080fd5b506100e2600480360360208110156100c557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661011e565b604080519115158252519081900360200190f35b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205460ff169056fea165627a7a7230582083b4bb28a2f1baa8c7d6160c92b3fefce28533565647d4b6e78ee2782fc59a7b0029",
  "deployedBytecode": "0x60806040526004361061004b5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166369102190811461005057806371de6362146100a2575b600080fd5b34801561005c57600080fd5b506100906004803603602081101561007357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166100f6565b60408051918252519081900360200190f35b3480156100ae57600080fd5b506100e2600480360360208110156100c557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661011e565b604080519115158252519081900360200190f35b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205460ff169056fea165627a7a7230582083b4bb28a2f1baa8c7d6160c92b3fefce28533565647d4b6e78ee2782fc59a7b0029",
  "sourceMap": "76:163:0:-;;;141:95;8:9:-1;5:2;;;30:1;27;20:12;5:2;141:95:0;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;141:95:0;;399:47:4;141:95:0;441:4:4;399:21;;;;:47;:::i;:::-;346:105;141:95:0;76:163;;1774:205:4;-1:-1:-1;;;;;1863:22:4;;;;1855:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1932:29:4;;;;:19;:29;;;;;;;;;;:42;;-1:-1:-1;;1932:42:4;;;;;;;;;;1774:205::o;76:163:0:-;;;;;;;",
  "deployedSourceMap": "76:163:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;1060:105:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1060:105:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1060:105:4;;;;;;;;;;;;;;;;;;;;;1420:122;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1420:122:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1420:122:4;;;;;;;;;;;;;;;;;;;;;;;1060:105;1141:19;;1119:7;1141:19;;;:11;:19;;;;;;;1060:105::o;1420:122::-;1508:29;;1489:4;1508:29;;;;;;;;;;;;;;1420:122::o",
  "source": "pragma solidity >=0.5.0;\n\nimport \"../mocks/CertificateControllerMock.sol\";\n\ncontract CertificateController is CertificateControllerMock {\n\n  constructor(address _certificateSigner) public CertificateControllerMock(_certificateSigner) {}\n\n}\n",
  "sourcePath": "/home/moez/Desktop/ProjetPFE/Dapps/ERC1400F/contracts/CertificateController/CertificateController.sol",
  "ast": {
    "absolutePath": "/home/moez/Desktop/ProjetPFE/Dapps/ERC1400F/contracts/CertificateController/CertificateController.sol",
    "exportedSymbols": {
      "CertificateController": [
        14
      ]
    },
    "id": 15,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:0"
      },
      {
        "absolutePath": "/home/moez/Desktop/ProjetPFE/Dapps/ERC1400F/contracts/mocks/CertificateControllerMock.sol",
        "file": "../mocks/CertificateControllerMock.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 15,
        "sourceUnit": 1216,
        "src": "26:48:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3,
              "name": "CertificateControllerMock",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1215,
              "src": "110:25:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_CertificateControllerMock_$1215",
                "typeString": "contract CertificateControllerMock"
              }
            },
            "id": 4,
            "nodeType": "InheritanceSpecifier",
            "src": "110:25:0"
          }
        ],
        "contractDependencies": [
          1215
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 14,
        "linearizedBaseContracts": [
          14,
          1215
        ],
        "name": "CertificateController",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 12,
              "nodeType": "Block",
              "src": "234:2:0",
              "statements": []
            },
            "documentation": null,
            "id": 13,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 9,
                    "name": "_certificateSigner",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 6,
                    "src": "214:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 10,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 8,
                  "name": "CertificateControllerMock",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1215,
                  "src": "188:25:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_CertificateControllerMock_$1215_$",
                    "typeString": "type(contract CertificateControllerMock)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "188:45:0"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6,
                  "name": "_certificateSigner",
                  "nodeType": "VariableDeclaration",
                  "scope": 13,
                  "src": "153:26:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "153:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "152:28:0"
            },
            "returnParameters": {
              "id": 11,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "234:0:0"
            },
            "scope": 14,
            "src": "141:95:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 15,
        "src": "76:163:0"
      }
    ],
    "src": "0:240:0"
  },
  "legacyAST": {
    "absolutePath": "/home/moez/Desktop/ProjetPFE/Dapps/ERC1400F/contracts/CertificateController/CertificateController.sol",
    "exportedSymbols": {
      "CertificateController": [
        14
      ]
    },
    "id": 15,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:0"
      },
      {
        "absolutePath": "/home/moez/Desktop/ProjetPFE/Dapps/ERC1400F/contracts/mocks/CertificateControllerMock.sol",
        "file": "../mocks/CertificateControllerMock.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 15,
        "sourceUnit": 1216,
        "src": "26:48:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3,
              "name": "CertificateControllerMock",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1215,
              "src": "110:25:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_CertificateControllerMock_$1215",
                "typeString": "contract CertificateControllerMock"
              }
            },
            "id": 4,
            "nodeType": "InheritanceSpecifier",
            "src": "110:25:0"
          }
        ],
        "contractDependencies": [
          1215
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 14,
        "linearizedBaseContracts": [
          14,
          1215
        ],
        "name": "CertificateController",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 12,
              "nodeType": "Block",
              "src": "234:2:0",
              "statements": []
            },
            "documentation": null,
            "id": 13,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 9,
                    "name": "_certificateSigner",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 6,
                    "src": "214:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 10,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 8,
                  "name": "CertificateControllerMock",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1215,
                  "src": "188:25:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_CertificateControllerMock_$1215_$",
                    "typeString": "type(contract CertificateControllerMock)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "188:45:0"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6,
                  "name": "_certificateSigner",
                  "nodeType": "VariableDeclaration",
                  "scope": 13,
                  "src": "153:26:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "153:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "152:28:0"
            },
            "returnParameters": {
              "id": 11,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "234:0:0"
            },
            "scope": 14,
            "src": "141:95:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 15,
        "src": "76:163:0"
      }
    ],
    "src": "0:240:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.9",
  "updatedAt": "2019-06-26T13:25:25.213Z",
  "devdoc": {
    "methods": {
      "certificateSigners(address)": {
        "details": "Get certificate signer authorization for an operator.",
        "params": {
          "operator": "Address whom to check the certificate signer authorization for."
        },
        "return": "bool 'true' if operator is authorized as certificate signer, 'false' if not."
      },
      "checkCount(address)": {
        "details": "Get number of transations already sent to this contract by the sender",
        "params": {
          "sender": "Address whom to check the counter of."
        },
        "return": "uint256 Number of transaction already sent to this contract."
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}